<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marc Nevin</title>
    <description>Marc's musings, blogs and technology rambling captured in one neat place.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Driven by Reinforcement Learning</title>
        <description>&lt;p&gt;This blog was originally posted &lt;a href=&quot;https://medium.com/kainos-applied-innovation/driven-by-reinforcement-learning-64dbd41ae12f&quot;&gt;here&lt;/a&gt; on medium!&lt;/p&gt;

&lt;p&gt;At this year’s Kainos AI Camp in Belfast and Birmingham, the Applied Innovation team worked with some staff from AWS to deliver two DeepRacer Day Workshops at the camps!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;AI Camp is a 2-week long camp full of theory, workshops and practical sessions to give students a strong introduction to the field of artificial intelligence and machine learning, and how it is being used to benefit our everyday lives.&lt;/p&gt;

&lt;p&gt;This year, two days of each camp were dedicated to AWS; the first covering AWS SageMaker and deploying machine learning models. The second day was a workshop and racing day for the AWS DeepRacer — teaching students about applications of AI models, reinforcement learning and getting some competitive spirit going before the hackathon that’s at the end of AI Camp.&lt;/p&gt;

&lt;h1 id=&quot;what-is-the-aws-deepracer&quot;&gt;What is the AWS DeepRacer?&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/qkgr64xjrzjay9sd2qax.png&quot; alt=&quot;A DeepRacer forward-facing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A fully autonomous 1/18th scale race car driven by reinforcement learning, 3D racing simulator, and global racing league. Featuring a Linux distribution with enough computing power and storage to run a fairly intense reinforcement learning model at some consistent speeds, the car is built on top of a popular model RC racing car chassis.&lt;/p&gt;

&lt;p&gt;After developing and training, the model is then downloaded to a physical car to be raced around a massive 8m x 4m track. We followed the AWS competition rules used for their racing events;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You have 4 minutes on the track to complete as many laps as you can.&lt;/li&gt;
  &lt;li&gt;The fastest lap is your submitted time.&lt;/li&gt;
  &lt;li&gt;Come off the track and your racer is placed where it came off.&lt;/li&gt;
  &lt;li&gt;Come off the track 3 times and your lap is marked as ‘Did Not Finish’.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/0tz8l44amev36ydjim9g.jpeg&quot; alt=&quot;Person walking around a large RC car track&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using the &lt;a href=&quot;https://aws.amazon.com&quot;&gt;AWS Console&lt;/a&gt; you can develop reinforcement learning models for the car and train them by setting the model to race around a simulated track for a few hours. The racers are aimed not only at just their racing competition, but they’re also for education, mostly on how reinforcement learning works and its applications. For both of our events, we started with some refreshers on different aspects of machine learning before covering what exactly reinforcement learning is, with the model building acting as the exercise to reinforce what they’ve learnt.&lt;/p&gt;

&lt;p&gt;If you want to build some models or are interested in how it works, here are the basics of Reinforcement Learning that we covered with the students;&lt;/p&gt;

&lt;h1 id=&quot;reinforcement-learning&quot;&gt;Reinforcement Learning&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/p3m2l4is1jrox2aul2bl.png&quot; alt=&quot;A graph for explaining were Reinforcement learning sits compared to AI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we look at Artificial Intelligence as an umbrella term, one of the biggest aspects under it is Machine Learning, which is often divided down into Supervised and Unsupervised Learning. Reinforcement learning is often forgotten in place of its more popular siblings, but still merits itself a category of its own for being somewhere between Supervised and Unsupervised.&lt;/p&gt;

&lt;p&gt;The quote AWS gives us is;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Reinforcement learning, in the context of artificial intelligence, 
is a type of dynamic programming that trains algorithms using 
a system of reward and punishment

— AWS DeepRacer Training
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To break that down; a reinforcement learning algorithm, or agent, learns by interacting with its environment. The agent receives rewards by performing correctly and penalties for performing incorrectly.&lt;/p&gt;

&lt;p&gt;The agent &lt;strong&gt;learns&lt;/strong&gt; without intervention from a human by maximizing its reward and minimizing its penalty.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To explain that further, let’s take the example of a robot jumping over some obstacles; first, you could give the robot the ability to jump at various distances while approaching an obstacle.&lt;/p&gt;

&lt;p&gt;For the first test, let it jump either 2 metres away, 1 metre away, half a metre away, or even 0 metres away which causes it to crash into the obstacle before actually launching upwards.&lt;/p&gt;

&lt;p&gt;After a lot of trial and error with when to jump, the robot will eventually learn that it will receive a point by jumping just before hitting an obstacle (say 0.5 metres) — because jumping then leads to a successful clearing of the obstacle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/iyqyvx6prnyfqzki3fna.gif&quot; alt=&quot;Gif of Robot clearing obstacles&quot; /&gt;
&lt;em&gt;From the AWS DeepRacer Training Course&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your robot will also learn that it will quickly lose points by jumping too early or too late — as jumping when too far from or too close to an obstacle will lead to a crash.&lt;/p&gt;

&lt;p&gt;The reward and punishment, in the form of points, positively reinforces the action of jumping at that ideal point, eventually making your robot really good at clearing the obstacles.&lt;/p&gt;

&lt;p&gt;This game can get more complicated if the goal becomes how quickly the robot can clear 10 obstacles in a row, or how well it can clear obstacles that require changing its direction. In a more complicated game, the robot could gain control over its speed and its ability to move in different directions.&lt;/p&gt;

&lt;p&gt;By using reinforcement learning to help the robot succeed at this new game the robot is now not only experimenting with different timings of its jumps but the speed at which it runs and the specific direction of its jumps. Like the timing of jumps, the robot will receive rewards and punishments for the speeds and directions that result in more points or fewer points.&lt;/p&gt;

&lt;p&gt;Again, through a lot of trial and error, your robot will eventually learn the right mix of jumping time, speed, and direction to successfully clear a whole series of obstacles.&lt;/p&gt;

&lt;p&gt;Applying this concept to the DeepRacer we can reward our Racer for staying on the track, speeding up etc, until the car can begin to complete the entire circuit. This GIF ties in the different elements of the DeepRacer and their relation to Reinforcement learning:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/55ldi2g9mm66yrpvslx7.gif&quot; alt=&quot;Gif of deepracer terms&quot; /&gt;
&lt;em&gt;From AWS: GIF of the reinforcement terms on the DeepRacer&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Back to the camp — after taking the students through this theory it was time to get them started on building their models.&lt;/p&gt;

&lt;p&gt;#The DeepRacer Console&lt;/p&gt;

&lt;p&gt;To autonomously race the car you have to develop and train your own machine learning model, to do this you have to use the AWS DeepRacer console. There we are given a model that we can shape various aspects of, mainly the reward algorithm, hyperparameter tuning and the action space. The amount of options for this leads to an impossibly large number of possibilities of configurations for the model.&lt;/p&gt;

&lt;p&gt;The reward algorithm lets you punish or reward the car encouraging it to complete the track in faster times, the variables you can control for this are the parameters that the car can measure. There’s a load of these parameters, most are self-explanatory aspects of the car and this diagram helps capture exactly how all of them relate to the car:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/0fkmlijdt6gfg6v4r1r0.png&quot; alt=&quot;Diagram of the DeepRacer with measurements it can take noted&quot; /&gt;
&lt;em&gt;From AWS: DeepRacer Parameters and how they relate to the car&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We took the students through each parameter at the time but a handy online resource, that the AWS team pointed us to, explained all the parameters that the DeepRacer has and how reinforcement learning applies to it. Find it &lt;a href=&quot;https://d2k9g1efyej86q.cloudfront.net/&quot;&gt;here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The hyperparameters offer a range of different options for tuning the model for the DeepRacers. We covered what each of them meant with the students but the important thing for them to know is how they can change your reward algorithm. Most people find that through trial and error, cloning, and retraining models — they can discover what seems to work best for a given model.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/n7ewy9g1h4eunz42mlha.png&quot; alt=&quot;Hyperparameters of the deepracer&quot; /&gt;
&lt;em&gt;The different hyperparameters of the DeepRacer&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After developing their reward algorithms and setting their hyperparameters, we can begin to train our models. Training is done in a fully &lt;a href=&quot;https://aws.amazon.com/robomaker/&quot;&gt;simulated environment&lt;/a&gt; of the track with a physics engine acting of every aspect of the car and track to try and best represent the real track. The model is set up to run in this environment for hours on the track and learn over a time that we have specified up to 8 hours.&lt;/p&gt;

&lt;p&gt;Once a model is trained, we can evaluate its performance by racing it on a simulated track, giving us some rough times for its performance and how much of the track it was able to complete. If the digital car completed at least one lap of the track then we downloaded the models and got ready to race them on the non-digital cars!&lt;/p&gt;

&lt;h1 id=&quot;racing-in-belfast&quot;&gt;Racing In Belfast&lt;/h1&gt;
&lt;p&gt;After uploading the models to the cars we were able to set them off on the track and get them racing, below are some shots of the students, the cars racing, and their reactions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/4ojsfdlx2awt9whs60lm.png&quot; alt=&quot;A person following the car across the track&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/2pr0f9iqaa0if7yi79ao.jpeg&quot; alt=&quot;view of the entire track&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/wbnscjydp3bqjgfsgtec.jpeg&quot; alt=&quot;Deepracer cornering&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/b46ueun1o8h5co4bcm5i.png&quot; alt=&quot;Author following the car around the track&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/y5nkc8951gy9njs8jbox.png&quot; alt=&quot;Rearview of the car&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/ztza1he2q860r622inlk.jpeg&quot; alt=&quot;AI camp mentors watching the race&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/d2pt0ssdv9xsbivgiz6b.jpeg&quot; alt=&quot;Action shot of the car&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/bzh7nx9heylh4e56lk0n.jpeg&quot; alt=&quot;Person giving a presentation on deepracer&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/tlke4gwel538rhs49v2c.png&quot; alt=&quot;Team of students celebrating&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/pszdfungcozh6zvzo3sr.jpeg&quot; alt=&quot;A team of students working on their ML models&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/yc4ifzvtd5by46cj1x2i.png&quot; alt=&quot;A team reviewing their models before a lap&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/s35lz023pc54662ha0d1.png&quot; alt=&quot;A team watching with anticipation&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/6fyawrm88ddnw50dhvcc.png&quot; alt=&quot;Group of three students watching the race&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/m9lbxgzcd6w4i36opqxo.jpeg&quot; alt=&quot;Mentor helping the students build their models&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/opol1rvez8t0h5amkdw9.jpeg&quot; alt=&quot;Students watching the race&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/ltyqf639ppfu8sa9shgd.jpeg&quot; alt=&quot;Scoreboard of the top times&quot; /&gt;
&lt;em&gt;Some of the pictures captured at AI Camp Belfast&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We got some great times with the winner hitting a time the AWS staff said would’ve placed at the AWS London Summit a few months before!&lt;/p&gt;

&lt;h1 id=&quot;racing-in-birmingham&quot;&gt;Racing In Birmingham&lt;/h1&gt;
&lt;p&gt;After a short break, we were back racing, this time in Birmingham! Again we took the students through all the theory, building models and then getting ready to race!&lt;/p&gt;

&lt;p&gt;Below we’ve got some photos and videos of the cars racing at the Birmingham AI Camp:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/5ekf4uq9a3wxngkdi02i.png&quot; alt=&quot;Students watching their first model race&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/u9hqrvzss4ksqqezp0kw.png&quot; alt=&quot;Author following the car around the track&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/g2mmyu7kwab6i1ydiwg2.png&quot; alt=&quot;Attendees watching their model&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/qjg55dzijdp0f0pb7wjo.png&quot; alt=&quot;Students using ipad to control their model&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/yxuyq6bzfw9nmvwnlcuh.png&quot; alt=&quot;Laptop showing the training running for a new model&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/pxodtxfbay3ahv3uqmv2.png&quot; alt=&quot;Large group of students watching the race&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/wxposo4krcoviawx2gh5.png&quot; alt=&quot;Kainos and AWS staff rotating the cars on the track&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/76ly9e0klgvimkq8rip7.png&quot; alt=&quot;A man following the car around the track&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/d1nq0gd4lcjscf6qsrft.png&quot; alt=&quot;Group of mentors watching the race&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/9e7z1561qg8icvuvqamf.png&quot; alt=&quot;Group of students looking at their car with AWS staff&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/qi3la9grgkepom8p5lw5.png&quot; alt=&quot;AWS staff resetting an off the track car&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/irr8zy771sd4mfm0b79e.png&quot; alt=&quot;Groups of students checking their model progress&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/vs7ywah63q21nmasosed.png&quot; alt=&quot;Some students working on their models&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/dzuw4qc1sd01zpttmtdl.png&quot; alt=&quot;All the campers reviewing their models&quot; /&gt;
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/mo12jgnqgfubi2us43kd.jpeg&quot; alt=&quot;Leaderboard for the day's racing&quot; /&gt;
&lt;em&gt;Some Pictures of AI Camp Birmingham&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After challenging the students to try to beat the great times in Belfast, they didn’t let us down, we got a blazingly fast time of 8.72 seconds. It was the fastest the AWS staff had seen in person, never mind placing in London as the Belfast model would’ve, they said that time would’ve won.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Both sets of campers really enjoyed the events and got super competitive with it all, they all went to complete the rest of AI Camp and its hackathon. But after running both sessions we learnt some lessons for competing with our own models in future!&lt;/p&gt;

&lt;h1 id=&quot;tips--tricks&quot;&gt;Tips &amp;amp; Tricks&lt;/h1&gt;

&lt;p&gt;So from running both camps and speaking to the team we definitely got some tips we want to pass on to you;
This first once might seem obvious for someone who’s used to machine learning concepts, but you need to build your models to generalise — be wary of convergence;&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;http://www.youtube.com/embed/Mbm-Lv5Un3Q?color=white&amp;amp;theme=light&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Training time is an important thing to keep in mind with convergence, training for a maximum of 8 hours, cloning it, and running it again doesn’t normally lead to an effective model. Typically you see much more success with smaller training increments of 1–2 hours before cloning and tweaking the hyperparameters.&lt;/p&gt;

&lt;p&gt;Next up is analysis; the DeepRacer console is useful but digging deeper into the training and evaluation logs is where you can start to see exact points causing you problems and start shaving vital seconds off your lap times. These two GitHub repos, &lt;a href=&quot;https://github.com/awslabs/amazon-sagemaker-examples/tree/master/reinforcement_learning/rl_deepracer_robomaker_coach_gazebo&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/aws-samples/aws-deepracer-workshops/tree/master/log-analysis&quot;&gt;here&lt;/a&gt;, proved to be extremely useful in building our own models and allowed us really to get ‘under the hood’ of the DeepRacer.&lt;/p&gt;

&lt;p&gt;And finally, keep in mind the actual real-world limitations of the car when building your models — these cars have computational limits that the simulator doesn’t. The training simulator can pass far more complex reward functions than the DeepRacer itself can. It’s also worth saying some aspects of the model, i.e. waypoints, just don’t exist in the real world and accuracy in the model evaluation won’t reflect when you try it on the track.&lt;/p&gt;

&lt;p&gt;An indispensable resource for taking your models further is the &lt;a href=&quot;https://deepracing.io/#about&quot;&gt;Deep Racer Community&lt;/a&gt;, this website and associated Slack group is a gold mine of tips and tricks. It includes topics for everything, including how to train models offline and avoid those large training bills!&lt;/p&gt;

&lt;h1 id=&quot;thats-all&quot;&gt;That’s all!&lt;/h1&gt;

&lt;p&gt;We’re going to take everything we learnt to start building our own models before we head back out to the track but for all of you its time to get started.&lt;/p&gt;

&lt;p&gt;Here’s the landing page for the &lt;a href=&quot;https://signin.aws.amazon.com/deepracer/home?region=us-east-1&quot;&gt;AWS DeepRacer Console&lt;/a&gt;, there are prizes for the virtual leagues and the community leagues if you can’t make it to an AWS Summit — happy racing!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you want to read more about some of the work the Applied Innovation team does, check out our &lt;a href=&quot;https://medium.com/kainos-applied-innovation&quot;&gt;Medium publication&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Interested in AI Camp? Find out more and sign up for updates &lt;a href=&quot;https://www.kainos.com/careers/students/aicamp&quot;&gt;here&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Oct 2019 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/driven-by-reinforcement-learning</link>
        <guid isPermaLink="true">http://localhost:4000/driven-by-reinforcement-learning</guid>
      </item>
    
      <item>
        <title>A beginners guide to Cron</title>
        <description>&lt;p&gt;Need to back-up on a Linux server monthly? Automate some scripting on a Mac every few days? or run some hacky code on your Raspberry Pi every hour?&lt;/p&gt;

&lt;p&gt;Cron jobs are here to make it easier.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Recently in work, I’ve been automating some regular data capture using a really bloated approach until I remembered about Cron.&lt;/p&gt;

&lt;p&gt;The reminder of how useful it can be has led to using it on a variety of smaller projects I’ve been working on such as some data collection across a few Raspberry Pis.&lt;/p&gt;

&lt;p&gt;Using Cron has reminded me of how much utility it has and how sometimes how it is overlooked. So, this post is aimed at helping beginners, those new to UNIX-like environments or someone a bit rusty, start using Cron.&lt;/p&gt;

&lt;p&gt;So first;&lt;/p&gt;

&lt;h1 id=&quot;what-is-cron&quot;&gt;What is Cron?&lt;/h1&gt;
&lt;p&gt;Cron’s name comes from the Greek word for time; Chronus, And it’s all about time with Cron, it’s a time-based job scheduler for Unix-like OS’s. Meaning it allows us to schedule jobs to run at fixed times, dates, or intervals continuously, these jobs can be anything as long as it’s one line; from a simple command to a complex script.&lt;/p&gt;

&lt;p&gt;Often these jobs are used for system maintenance, automation or admin tasks, used for taking the onus off the user to remember and enabling it to run with no intervention.&lt;/p&gt;

&lt;p&gt;Sounds useful, how do we start?&lt;/p&gt;

&lt;h1 id=&quot;creating-a-cron-job&quot;&gt;Creating a Cron job&lt;/h1&gt;
&lt;p&gt;It all happens on the command line, so starting there and open the Cron table, or crontab. It’s where we can see, edit and create new Cron jobs, this can be accessed by typing this;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crontab &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you’ve never used Cron before it’ll open an empty file for you to enter your commands.&lt;/p&gt;

&lt;p&gt;Note: It may ask you to set a default editor, if you haven’t already, to edit the file containing the table, this can any command line editor such as Vim or nano.&lt;/p&gt;

&lt;h2 id=&quot;cron-format&quot;&gt;Cron Format&lt;/h2&gt;
&lt;p&gt;Cron follows a standard format, 5 values then your command, minutes, hours, day, month and day of the week. For example;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5 7 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /home/test.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This would run a bash script, test.sh, at 5 past 7, every day.&lt;/p&gt;

&lt;p&gt;A good visual used a lot for explaining what each of these 5 values covers, is this one;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌───────────── minute &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 - 59&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
│ ┌───────────── hour &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 - 23&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
│ │ ┌───────────── day of the month &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 - 31&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
│ │ │ ┌───────────── month &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 - 12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
│ │ │ │ ┌───────────── day of the week &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 - 6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Sunday to Saturday, 7 is also Sunday on some systems&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
│ │ │ │ │                                   
│ │ │ │ │
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;to execute
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some examples would be ` 0 * * * *&lt;code class=&quot;highlighter-rouge&quot;&gt; would be every minute, &lt;/code&gt; * * * * *&lt;code class=&quot;highlighter-rouge&quot;&gt; would be every second or &lt;/code&gt;0 0 * * *` the start of every month. An asterisk means the same as it does in most applications, first to the last inclusive, so everything.&lt;/p&gt;

&lt;p&gt;But there’s more you can do though than picking one value;&lt;/p&gt;

&lt;h4 id=&quot;slash&quot;&gt;Slash&lt;/h4&gt;
&lt;p&gt;You can use ‘/’ to indicate steps, so &lt;code class=&quot;highlighter-rouge&quot;&gt;*/10 * * * *&lt;/code&gt; would indicate every 10 minutes.&lt;/p&gt;

&lt;h4 id=&quot;hyphen&quot;&gt;Hyphen&lt;/h4&gt;
&lt;p&gt;Another is ‘-‘ can be used for inclusive ranges so &lt;code class=&quot;highlighter-rouge&quot;&gt;0 0 1-6 * *&lt;/code&gt; would be the start of every month for the first 6 months.&lt;/p&gt;

&lt;h4 id=&quot;comma&quot;&gt;Comma&lt;/h4&gt;
&lt;p&gt;The last one I’ll talk about for now is ‘,’ which can be used to create lists, for example, &lt;code class=&quot;highlighter-rouge&quot;&gt;0 * * * MON,WED,FRI&lt;/code&gt; which would run every minuite on Mondays, Wednesdays and Fridays.&lt;/p&gt;

&lt;p&gt;There are more options such as using some characters but these aren’t standard across most platforms.&lt;/p&gt;

&lt;h4 id=&quot;keywords&quot;&gt;Keywords&lt;/h4&gt;
&lt;p&gt;Above we also just used some keywords, Cron has some functionality to understand keyphrases like shorthand for days and months. So for the day of week field, you can use MON-SUN. And for the month field, you can use JAN-DEC.&lt;/p&gt;

&lt;p&gt;On a lot of systems there some keywords that can be used for some heavily used times, here’s a list of some of the most common ones;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@reboot        Run once at startup
@yearly        Run once a year &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 0 1 1 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
@annually      same as @yearly
@monthly       Run once a month &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 0 1 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
@weekly        Run once a week &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 0 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
@daily         Run once a day &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 0 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
@midnight      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;same as @daily&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
@hourly        Run once an hour &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To make this easier there’s a number of fairly good online &lt;a href=&quot;https://crontab-generator.org/&quot;&gt;crontab generators&lt;/a&gt;, to help build your job in a more visual way.&lt;/p&gt;

&lt;h2 id=&quot;youve-got-mail&quot;&gt;You’ve got mail?&lt;/h2&gt;
&lt;p&gt;At this point, it’s worth mentioning that you’re going to get some mail. Every-time a Cron job runs, so maybe once a minute, it uses SMTP to send you an email notification to your terminal. You’ll see a prompt next time you open your terminal saying you’ve got mail, running &lt;code class=&quot;highlighter-rouge&quot;&gt;mail&lt;/code&gt; will allow you to see these and from there you can &lt;code class=&quot;highlighter-rouge&quot;&gt;del *&lt;/code&gt; to delete all of the mail…&lt;/p&gt;

&lt;p&gt;Alternatively, if you add this to the start of the crontab&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;MAILTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It’ll prevent it from sending your terminal mail.&lt;/p&gt;

&lt;h2 id=&quot;checking-your-job&quot;&gt;Checking your Job&lt;/h2&gt;
&lt;p&gt;Now if you’ve created a job, you can see our Cron table, which will contain it by running this;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crontab &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which will allow you to see your job and any others you’ve set, &lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt; will enable you to go back and edit your job if you want to.&lt;/p&gt;

&lt;h2 id=&quot;removing-a-job&quot;&gt;Removing a job&lt;/h2&gt;
&lt;p&gt;To remove your crontab to stop all your jobs you can simply run this;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crontab &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And they’ll all be gone, or you can just edit the crontab and remove individual ones that you don’t want.&lt;/p&gt;

&lt;h1 id=&quot;pitfalls&quot;&gt;Pitfalls&lt;/h1&gt;
&lt;p&gt;Although Cron seems fairly straightforward, it’s also full of gotchas, speaking to anyone who’s worked with Cron jobs usually leads to some story about a misconfigured job that’s been a pain to resolve or lead to some catastrophe. So when using them you can regularly find yourself getting tripped up over simple things or some of the odder aspects of the tool.&lt;/p&gt;

&lt;p&gt;Some of the most common traps come from:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Wrong Crontab notation&lt;/li&gt;
  &lt;li&gt;Permission problems&lt;/li&gt;
  &lt;li&gt;Environment variables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This Stack Exchange &lt;a href=&quot;https://askubuntu.com/questions/23009/why-crontab-scripts-are-not-working&quot;&gt;thread&lt;/a&gt; covers a lot of the most common ones and is a really valuable resource for troubleshooting your issues.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Overall, Cron is a great tool when used in the right place but it’s not a one-stop shop for your scheduling needs. Remember to pick the right tool for the job but if its Cron, hopefully, this guide will set you off in the right path!&lt;/p&gt;
</description>
        <pubDate>Mon, 06 May 2019 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/a-beginners-guide-to-cron</link>
        <guid isPermaLink="true">http://localhost:4000/a-beginners-guide-to-cron</guid>
      </item>
    
  </channel>
</rss>
